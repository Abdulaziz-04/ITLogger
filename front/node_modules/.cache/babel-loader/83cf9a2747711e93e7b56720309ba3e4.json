{"ast":null,"code":"import { GET_LOG, ADD_LOG, DELETE_LOG, UPDATE_LOG, ERROR, SET_CURRENT, SET_LOADING, DELETE_TECH, SEARCH_LOG, ADD_TECH, GET_TECH, CLEAR } from '../Types';\n\nconst LogReducer = (state, action) => {\n  switch (action.type) {\n    default:\n      return state;\n\n    case GET_LOG:\n      return { ...state,\n        logs: action.payload,\n        loading: false\n      };\n\n    case ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    case SET_LOADING:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case ADD_LOG:\n      {\n        return { ...state,\n          logs: [...state.logs, action.payload]\n        };\n      }\n\n    case GET_TECH:\n      {\n        return { ...state,\n          techs: action.payload\n        };\n      }\n\n    case CLEAR:\n      {\n        return { ...state,\n          error: null,\n          current: null,\n          loading: false,\n          filter: null\n        };\n      }\n\n    case SET_CURRENT:\n      {\n        return { ...state,\n          current: action.payload\n        };\n      }\n\n    case UPDATE_LOG:\n      {\n        return { ...state,\n          logs: state.logs.map(log => log._id === action.payload._id ? action.payload : log)\n        };\n      }\n\n    case DELETE_LOG:\n      {\n        return { ...state,\n          logs: state.logs.filter(log => log._id !== action.payload._id)\n        };\n      }\n\n    case ADD_TECH:\n      {\n        return { ...state,\n          techs: [...state.techs, action.payload]\n        };\n      }\n\n    case DELETE_TECH:\n      {\n        return { ...state,\n          techs: state.techs.filter(tech => tech._id !== action.payload._id)\n        };\n      }\n\n    case SEARCH_LOG:\n      {\n        return { ...state,\n          filter: state.logs.filter(log => {\n            const regex = new RegExp(`${action.payload}`, 'gi');\n            return log.message.match(regex) || log.tech.match(regex);\n          })\n        };\n      }\n  }\n};\n\nexport default LogReducer;","map":{"version":3,"sources":["/home/abdul/Documents/Reactprog/ITLogger/frontend/src/ContextAPI/LogsAPI/LogReducer.js"],"names":["GET_LOG","ADD_LOG","DELETE_LOG","UPDATE_LOG","ERROR","SET_CURRENT","SET_LOADING","DELETE_TECH","SEARCH_LOG","ADD_TECH","GET_TECH","CLEAR","LogReducer","state","action","type","logs","payload","loading","error","techs","current","filter","map","log","_id","tech","regex","RegExp","message","match"],"mappings":"AAAA,SACIA,OADJ,EAEIC,OAFJ,EAGIC,UAHJ,EAIIC,UAJJ,EAKIC,KALJ,EAMIC,WANJ,EAOIC,WAPJ,EAQIC,WARJ,EASIC,UATJ,EAUIC,QAVJ,EAWIC,QAXJ,EAYIC,KAZJ,QAaO,UAbP;;AAeA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClC,UAAQA,MAAM,CAACC,IAAf;AACI;AACI,aAAOF,KAAP;;AACJ,SAAKb,OAAL;AACI,aAAO,EACH,GAAGa,KADA;AAEHG,QAAAA,IAAI,EAAEF,MAAM,CAACG,OAFV;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKd,KAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHM,QAAAA,KAAK,EAAEL,MAAM,CAACG;AAFX,OAAP;;AAIJ,SAAKX,WAAL;AAAkB;AACd,eAAO,EACH,GAAGO,KADA;AAEHK,UAAAA,OAAO,EAAE;AAFN,SAAP;AAIH;;AACD,SAAKjB,OAAL;AAAc;AACV,eAAO,EACH,GAAGY,KADA;AAEHG,UAAAA,IAAI,EAAE,CAAC,GAAGH,KAAK,CAACG,IAAV,EAAgBF,MAAM,CAACG,OAAvB;AAFH,SAAP;AAIH;;AACD,SAAKP,QAAL;AAAe;AACX,eAAO,EACH,GAAGG,KADA;AAEHO,UAAAA,KAAK,EAAEN,MAAM,CAACG;AAFX,SAAP;AAIH;;AACD,SAAKN,KAAL;AAAY;AACR,eAAO,EACH,GAAGE,KADA;AAEHM,UAAAA,KAAK,EAAE,IAFJ;AAGHE,UAAAA,OAAO,EAAE,IAHN;AAIHH,UAAAA,OAAO,EAAE,KAJN;AAKHI,UAAAA,MAAM,EAAE;AALL,SAAP;AAOH;;AACD,SAAKjB,WAAL;AAAkB;AACd,eAAO,EACH,GAAGQ,KADA;AAEHQ,UAAAA,OAAO,EAAEP,MAAM,CAACG;AAFb,SAAP;AAIH;;AACD,SAAKd,UAAL;AAAiB;AACb,eAAO,EACH,GAAGU,KADA;AAEHG,UAAAA,IAAI,EAAEH,KAAK,CAACG,IAAN,CAAWO,GAAX,CAAeC,GAAG,IACpBA,GAAG,CAACC,GAAJ,KAAYX,MAAM,CAACG,OAAP,CAAeQ,GAA3B,GAAiCX,MAAM,CAACG,OAAxC,GAAkDO,GADhD;AAFH,SAAP;AAMH;;AACD,SAAKtB,UAAL;AAAiB;AACb,eAAO,EACH,GAAGW,KADA;AAEHG,UAAAA,IAAI,EAAEH,KAAK,CAACG,IAAN,CAAWM,MAAX,CAAkBE,GAAG,IAAIA,GAAG,CAACC,GAAJ,KAAYX,MAAM,CAACG,OAAP,CAAeQ,GAApD;AAFH,SAAP;AAIH;;AACD,SAAKhB,QAAL;AAAe;AACX,eAAO,EACH,GAAGI,KADA;AAEHO,UAAAA,KAAK,EAAE,CAAC,GAAGP,KAAK,CAACO,KAAV,EAAiBN,MAAM,CAACG,OAAxB;AAFJ,SAAP;AAIH;;AACD,SAAKV,WAAL;AAAkB;AACd,eAAO,EACH,GAAGM,KADA;AAEHO,UAAAA,KAAK,EAAEP,KAAK,CAACO,KAAN,CAAYE,MAAZ,CACHI,IAAI,IAAIA,IAAI,CAACD,GAAL,KAAaX,MAAM,CAACG,OAAP,CAAeQ,GADjC;AAFJ,SAAP;AAMH;;AACD,SAAKjB,UAAL;AAAiB;AACb,eAAO,EACH,GAAGK,KADA;AAEHS,UAAAA,MAAM,EAAET,KAAK,CAACG,IAAN,CAAWM,MAAX,CAAkBE,GAAG,IAAI;AAC7B,kBAAMG,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEd,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,mBAAOO,GAAG,CAACK,OAAJ,CAAYC,KAAZ,CAAkBH,KAAlB,KAA4BH,GAAG,CAACE,IAAJ,CAASI,KAAT,CAAeH,KAAf,CAAnC;AACH,WAHO;AAFL,SAAP;AAOH;AAnFL;AAqFH,CAtFD;;AAwFA,eAAef,UAAf","sourcesContent":["import {\n    GET_LOG,\n    ADD_LOG,\n    DELETE_LOG,\n    UPDATE_LOG,\n    ERROR,\n    SET_CURRENT,\n    SET_LOADING,\n    DELETE_TECH,\n    SEARCH_LOG,\n    ADD_TECH,\n    GET_TECH,\n    CLEAR\n} from '../Types';\n\nconst LogReducer = (state, action) => {\n    switch (action.type) {\n        default:\n            return state;\n        case GET_LOG:\n            return {\n                ...state,\n                logs: action.payload,\n                loading: false\n            };\n        case ERROR:\n            return {\n                ...state,\n                error: action.payload\n            };\n        case SET_LOADING: {\n            return {\n                ...state,\n                loading: true\n            };\n        }\n        case ADD_LOG: {\n            return {\n                ...state,\n                logs: [...state.logs, action.payload]\n            };\n        }\n        case GET_TECH: {\n            return {\n                ...state,\n                techs: action.payload\n            };\n        }\n        case CLEAR: {\n            return {\n                ...state,\n                error: null,\n                current: null,\n                loading: false,\n                filter: null\n            };\n        }\n        case SET_CURRENT: {\n            return {\n                ...state,\n                current: action.payload\n            };\n        }\n        case UPDATE_LOG: {\n            return {\n                ...state,\n                logs: state.logs.map(log =>\n                    log._id === action.payload._id ? action.payload : log\n                )\n            };\n        }\n        case DELETE_LOG: {\n            return {\n                ...state,\n                logs: state.logs.filter(log => log._id !== action.payload._id)\n            };\n        }\n        case ADD_TECH: {\n            return {\n                ...state,\n                techs: [...state.techs, action.payload]\n            };\n        }\n        case DELETE_TECH: {\n            return {\n                ...state,\n                techs: state.techs.filter(\n                    tech => tech._id !== action.payload._id\n                )\n            };\n        }\n        case SEARCH_LOG: {\n            return {\n                ...state,\n                filter: state.logs.filter(log => {\n                    const regex = new RegExp(`${action.payload}`, 'gi');\n                    return log.message.match(regex) || log.tech.match(regex);\n                })\n            };\n        }\n    }\n};\n\nexport default LogReducer;\n"]},"metadata":{},"sourceType":"module"}